#!/bin/bash -e

interrupted() {
	die
	exit 2
}

die() {
	[ "$@" ] && echo "ERROR: $@"
	umount_pseudofs
	umountbind_cache
	rm -fr $WDIR
}

chroot_run() {
	mount_pseudofs
	chroot $VENOMSRC $@
	umount_pseudofs
}

mount_pseudofs() {
	mount --bind /dev $VENOMSRC/dev
	mount -t devpts devpts $VENOMSRC/dev/pts -o gid=5,mode=620
	mount -t proc proc $VENOMSRC/proc
	mount -t sysfs sysfs $VENOMSRC/sys
	mount -t tmpfs tmpfs $VENOMSRC/run
}

umount_pseudofs() {
	umount $VENOMSRC/dev/pts &>/dev/null
	umount $VENOMSRC/dev &>/dev/null
	umount $VENOMSRC/run &>/dev/null
	umount $VENOMSRC/proc &>/dev/null
	umount $VENOMSRC/sys &>/dev/null
}

mountbind_cache() {
	# mount bind cachedir
	mkdir -p $SRC_CACHE $PKG_CACHE
	mount --bind $SRC_CACHE $VENOMSRC/var/cache/scratchpkg/packages
	mount --bind $PKG_CACHE $VENOMSRC/var/cache/scratchpkg/sources
}

umountbind_cache() {
	# umount binded cachedir
	umount $VENOMSRC/var/cache/scratchpkg/sources &>/dev/null
	umount $VENOMSRC/var/cache/scratchpkg/packages &>/dev/null
}

usage() {
	cat << EOF
Usage:
  $(basename $0) [options]
  
Options:
  -p <path>           set packages cache directory
  -s <path>           set sources cache directory
  -P <pkg1 pkgN ...>  package to install into iso
  -i <initrd>         use custom initrd
  -k <kernel>         use custom kernel
  -o <name.iso>       output name for iso
  -h                  show this help msg
  
EOF
}

parseopt() {
	while [ "$1" ]; do
		case $1 in
			-p) PKG_CACHE=$2
				shift 2;;
			-s) SRC_CACHE=$2
				shift 2;;
			-i) INITRD_FILE=$2
				shift 2;;
			-k) KERNEL_FILE=$2
				shift 2;;
			-o) OUTPUT=$2
				shift 2;;
			-P) while [ "$2" ]; do
					case $2 in
						-*) break ;;
						*) [ -z "$ADD_PKGS" ] && expkg="$2" || expkg="$ADD_PKGS $2"
					esac
					shift
				done ;;
			-h) usage; exit 0;;
			*)  VENOMSRC=$1
				shift;;
		esac
	done
}

CWD=$PWD
WDIR=/tmp/venomiso
ISOLINUXDIR=$CWD/isolinux
DISTRONAME="Venom Linux"
LABEL=VenomLive
REQ_PKGS="dialog squashfs-tools libisoburn"

isolinux_files="chain.c32 isolinux.bin ldlinux.c32 libutil.c32 reboot.c32 vesamenu.c32
isohdpfx.bin isolinux.cfg libcom32.c32 poweroff.c32 splash.png"

parseopt $@

OUTPUT=${OUTPUT:-venom.iso}
PKG_CACHE=${PKG_CACHE:-$CWD/cache_packages}
SRC_CACHE=${SRC_CACHE:-$CWD/cache_sources}

trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

if [ -z $VENOMSRC ]; then
	echo "Venom source dir not define! Aborted."
	exit 1
elif [ ! -d $VENOMSRC ]; then
	echo "Directory '$VENOMSRC' not exist."
	exit 1
fi

rm -fr $WDIR
mkdir -p $WDIR

# prepare isolinux in working dir
mkdir -p $WDIR/{filesystem,isolinux,boot}
for file in $isolinux_files; do
	cp $ISOLINUXDIR/$file $WDIR/isolinux
done
echo "$DISTRONAME" > $WDIR/isolinux/venomlive
[ -d virootfs ] && cp -aR virootfs $WDIR

# install pkgs
mountbind_cache
chroot_run scratch install $REQ_PKGS $ADD_PKGS --no-confirm || die "failed install packages"
umountbind_cache

# copy kernel
cp $VENOMSRC/boot/vmlinuz-venom $WDIR/boot/vmlinuz || die "failed copying kernel"

# generate initrd
kernver=$(file $VENOMSRC/boot/vmlinuz-venom | cut -d ' ' -f9)
chroot_run mkinitramfs -q -k $kernver -o /boot/initrd-venom.img || die "failed create initramfs"
cp $VENOMSRC/boot/initrd-venom.img $WDIR/boot/initrd

# make sfs
mksquashfs $VENOMSRC $WDIR/filesystem/root.sfs \
		-b 1048576 -comp xz -Xdict-size 100% \
		-e $VENOMSRC/var/cache/scratchpkg/sources/* \
		-e $VENOMSRC/var/cache/scratchpkg/packages/* \
		-e $VENOMSRC/tmp/* || die "failed create squashed filesystem"

rm -f $OUTPUT
xorriso -as mkisofs \
		-r -J -joliet-long \
		-l -cache-inodes \
		-isohybrid-mbr $CWD/isolinux/isohdpfx.bin \
		-partition_offset 16 \
		-A "$LABEL" \
		-V "$LABEL" \
		-b isolinux/isolinux.bin \
		-c isolinux/boot.cat \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-o $OUTPUT \
		$WDIR || die "failed create iso"

exit 0
