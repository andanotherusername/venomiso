#!/bin/bash -e

interrupted() {
	die "Abort by user."
}

cleanup() {
	[ "$cleanvenomsrc" = 1 ] && rm -fr $VENOMSRC
	rm -fr $WDIR
}

die() {
	[ "$@" ] && printerror $@
	umountbind_cache
	umount_pseudofs
	cleanup
	exit 1
}

printstep() {
	echo -e "\e[0;36m::\e[0m $*"
}

printerror() {
	echo -e "\e[0;31mERROR:\e[0m $*"
}

chroot_run() {
	mount_pseudofs
	cp -L /etc/resolv.conf $VENOMSRC/etc/
	chroot $VENOMSRC $@
	retval=$?
	umount_pseudofs
	return $retval
}

mount_pseudofs() {
	mount --bind /dev $VENOMSRC/dev
	mount -t devpts devpts $VENOMSRC/dev/pts -o gid=5,mode=620
	mount -t proc proc $VENOMSRC/proc
	mount -t sysfs sysfs $VENOMSRC/sys
	mount -t tmpfs tmpfs $VENOMSRC/run
}

umount_pseudofs() {
	umount $VENOMSRC/dev/pts &>/dev/null
	umount $VENOMSRC/dev &>/dev/null
	umount $VENOMSRC/run &>/dev/null
	umount $VENOMSRC/proc &>/dev/null
	umount $VENOMSRC/sys &>/dev/null
}

mountbind_cache() {
	# mount bind cachedir
	mkdir -p $SRC_CACHE $PKG_CACHE
	mount --bind $SRC_CACHE $VENOMSRC/var/cache/scratchpkg/sources
	mount --bind $PKG_CACHE $VENOMSRC/var/cache/scratchpkg/packages
}

umountbind_cache() {
	# umount binded cachedir
	umount $VENOMSRC/var/cache/scratchpkg/sources &>/dev/null
	umount $VENOMSRC/var/cache/scratchpkg/packages &>/dev/null
}

fetch() {
	local filename
	filename=$(basename $ROOTFSURL)
	rm -f $filename
	if [ -f $filename.part ]; then
		wget -c --output-document=$filename.part $ROOTFSURL
	else
		wget --output-document=$filename.part $ROOTFSURL
	fi
	if [ $? != 0 ]; then
		return 1
	else
		mv $filename.part $filename
	fi
}

usage() {
	cat << EOF
Usage:
  $(basename $0) [options] <venom source>
  
Options:
  -p <path>           set packages cache directory
  -s <path>           set sources cache directory
  -P <pkg1 pkgN ...>  package to install into iso
  -i <initrd>         use custom initrd
  -k <kernel>         use custom kernel
  -o <name.iso>       output name for iso
  -h                  show this help msg
  
Note:
  'venom source' should be a rootfs directory or rootfs tarball image
  if not define, it will download prebuilt one
  
EOF
}

checkinput() {
	if [ -z $1 ] || [[ $1 = -* ]]; then
		echo "this option need argument"
		exit 2
	fi
}

parseopt() {
	while [ "$1" ]; do
		case $1 in
			-p) checkinput $2
				PKG_CACHE=$2
				shift 2;;
			-s) checkinput $2
				SRC_CACHE=$2
				shift 2;;
			-i) checkinput $2
				INITRD_FILE=$2
				shift 2;;
			-k) checkinput $2
				KERNEL_FILE=$2
				shift 2;;
			-o) checkinput $2
				OUTPUT=$2
				shift 2;;
			-r) REVDEP="1"
				shift 1;;
			-P) checkinput $2
				while [ "$2" ]; do
					case $2 in
						-*) break ;;
						*) [ -z "$ADD_PKGS" ] && ADD_PKGS="$2" || ADD_PKGS="$ADD_PKGS $2"
					esac
					shift
				done
				shift ;;
			-h) usage; exit 0;;
			*)  VENOM=$1
				shift;;
		esac
	done
}

CWD=$PWD
WDIR=/tmp/venomiso
VENOMSRC=/tmp/venomrootfs
LABEL=VenomLive
REQ_PKGS="dialog squashfs-tools grub-efi btrfs-progs reiserfsprogs xfsprogs"
ROOTFSURL="https://sourceforge.net/projects/venomlinux/files/venom-rootfs.txz"
isolinux_files="chain.c32 isolinux.bin ldlinux.c32 libutil.c32 reboot.c32 vesamenu.c32 libcom32.c32 poweroff.c32"

if [ $UID != 0 ]; then
	printerror "$(basename $0) need run as root."
	exit 3
fi

if [ ! $(type -p xorriso ) ]; then
	printerror "'libisoburn' not installed."
	exit 1
fi

if [ ! $(type -p mksquashfs ) ]; then
	printerror "'squashfs-tools' not installed."
	exit 1
fi

if [ ! $(type -p mkdosfs ) ]; then
	printerror "'dosfstools' not installed."
	exit 1
fi

if [ ! $(type -p isohybrid ) ]; then
	printerror "'syslinux' not installed."
	exit 1
fi

if [ ! -d /usr/lib/grub/x86_64-efi/ ]; then
	printerror "'grub-efi' not installed."
	exit 1
fi

parseopt $@

OUTPUT=${OUTPUT:-venom-$(date +"%Y%m%d").iso}
PKG_CACHE=${PKG_CACHE:-$CWD/cache_packages}
SRC_CACHE=${SRC_CACHE:-$CWD/cache_sources}

if [ "${OUTPUT##*.}" != "iso" ]; then
	printerror "output name should be .iso extension"
	exit 1
fi

trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

if [ -z $VENOM ]; then
	if [ ! -f $(basename $ROOTFSURL) ]; then
		printstep "Fetching $(basename $ROOTFSURL)..."
		fetch $ROOTFSURL || die "failed downloading $(basename $ROOTFSURL)"
	fi
	VENOM=$(basename $ROOTFSURL)
fi

case $VENOM in
	*.txz)	rm -fr $VENOMSRC
			mkdir -p $VENOMSRC
			cleanvenomsrc=1
			printstep "Extracting $VENOM..."
			tar xf $VENOM -C $VENOMSRC || die "failed extracting $VENOM";;
	*)		VENOMSRC=$VENOM;;
esac

rm -fr $WDIR
mkdir -p $WDIR

# prepare isolinux in working dir
printstep "Preparing isolinux..."
mkdir -p $WDIR/{venom,isolinux,boot}
for file in $isolinux_files; do
	cp /usr/share/syslinux/$file $WDIR/isolinux
done
cp isolinux/splash.png $WDIR/isolinux
cp isolinux/isolinux.cfg $WDIR/isolinux
[ -d virootfs ] && cp -aR virootfs $WDIR

# install pkgs
mountbind_cache
printstep "Updating ports..."
chroot_run scratch sync || die "failed updating ports"
printstep "Upgrading scratchpkg..."
chroot_run scratch upgrade -y --no-backup scratchpkg || die "failed upgrade scratchpkg"
printstep "Upgrading system..."
chroot_run scratch sysup -y --no-backup || die "failed system upgrade"

printstep "Installing iso extra packages..."
chroot_run scratch install $ADD_PKGS -y || die "failed install iso extra packages"
printstep "Running pkgfix script..."
chroot_run pkgfix -r -y || die "failed fixing broken pkgs"
# run first stage revdep
if [ "$REVDEP" = 1 ]; then
	printstep "Check broken packages (1st)..."
	chroot_run revdep -r -y || die "failed revdep process"
fi

printstep "Installing required by iso packages..."
chroot_run scratch install $REQ_PKGS -y || die "failed install required by iso packages"
# run 2nd stage revdep
if [ "$REVDEP" = 1 ]; then
	printstep "Check broken packages (2nd)..."
	chroot_run revdep -r -y || die "failed revdep process"
fi

# unmount binded cache
umountbind_cache

# make sfs
printstep "Squashing root filesystem..."
mksquashfs $VENOMSRC $WDIR/venom/venomrootfs.sfs \
		-b 1048576 -comp xz -Xdict-size 100% \
		-e $VENOMSRC/var/cache/scratchpkg/sources/* \
		-e $VENOMSRC/var/cache/scratchpkg/packages/* \
		-e $VENOMSRC/var/cache/scratchpkg/log/* \
		-e $VENOMSRC/var/cache/scratchpkg/work/* \
		-e $VENOMSRC/tmp/* 2>/dev/null || die "failed create squashed filesystem"

# copy kernel
printstep "Preparing kernel for iso..."
if [ $KERNEL_FILE ]; then
	cp $KERNEL_FILE $WDIR/boot/vmlinuz || die "failed copying kernel"
else
	cp $VENOMSRC/boot/vmlinuz-venom $WDIR/boot/vmlinuz || die "failed copying kernel"
fi

# generate initrd
printstep "Preparing initrd for iso..."
if [ $INITRD_FILE ]; then
	cp $INITRD_FILE $WDIR/boot/initrd || die "failed copying initrd"
else
	cp $CWD/initramfs/venomiso.hook $VENOMSRC/etc/mkinitramfs.d || die "failed copying venomiso.hook"
	kernver=$(file $VENOMSRC/boot/vmlinuz-venom | cut -d ' ' -f9)
	chroot_run mkinitramfs -k $kernver -a venomiso -o /boot/initrd-venom.img || die "failed create initramfs"
	cp $VENOMSRC/boot/initrd-venom.img $WDIR/boot/initrd || die "failed copying initrd"
fi
		
printstep "Setup UEFI mode..."
mkdir -p $WDIR/boot/{grub/{fonts,x86_64-efi},EFI}
if [ -f /usr/share/grub/unicode.pf2 ];then
	cp /usr/share/grub/unicode.pf2 $WDIR/boot/grub/fonts
fi
if [ -f $WDIR/isolinux/splash.png ]; then
	cp $WDIR/isolinux/splash.png $WDIR/boot/grub/
fi
echo "set prefix=/boot/grub" > $WDIR/boot/grub-early.cfg
cp -a /usr/lib/grub/x86_64-efi/*.{mod,lst} $WDIR/boot/grub/x86_64-efi || die "Failed copying efi files"
cp isolinux/grub.cfg $WDIR/boot/grub/

grub-mkimage -c $WDIR/boot/grub-early.cfg -o $WDIR/boot/EFI/bootx64.efi -O x86_64-efi -p "" iso9660 normal search search_fs_file
modprobe loop
dd if=/dev/zero of=$WDIR/boot/efiboot.img count=4096
mkdosfs -n VENOM-UEFI $WDIR/boot/efiboot.img || die "Failed mkdosfs"
mkdir -p $WDIR/boot/efiboot
mount -o loop $WDIR/boot/efiboot.img $WDIR/boot/efiboot || die "Failed mount efiboot.img"
mkdir -p $WDIR/boot/efiboot/EFI/boot
cp $WDIR/boot/EFI/bootx64.efi $WDIR/boot/efiboot/EFI/boot
umount $WDIR/boot/efiboot
rm -fr $WDIR/boot/efiboot

# save list packages to iso
for pkg in base $ADD_PKGS; do
	echo "$pkg" >> $WDIR/venom/pkglist
done

printstep "Creating iso ($OUTPUT)..."
rm -f $OUTPUT
xorriso -as mkisofs \
    -isohybrid-mbr /usr/share/syslinux/isohdpfx.bin \
    -c isolinux/boot.cat \
    -b isolinux/isolinux.bin \
      -no-emul-boot \
      -boot-load-size 4 \
      -boot-info-table \
    -eltorito-alt-boot \
    -e boot/efiboot.img \
      -no-emul-boot \
      -isohybrid-gpt-basdat \
      -volid $LABEL \
    -o $OUTPUT $WDIR || die "failed create iso"
		
printstep "Generate md5sum..."
md5sum $OUTPUT > $OUTPUT.md5

printstep "Cleaning up..."
cleanup

exit 0
