#!/bin/bash

BACKTITLE="Venom Linux Installation"

DEFSIZE="10 50 0"
YESNOSIZE="8 50"
WIDTH=70
HEIGHT=10

VENOMROOT="/mnt/venom"
ROOTSFS="/mnt/initramfs/.medium/filesystem/root.sfs"

_dialog() {
	dialog --no-mouse "$@" 3>&1 1>&2 2>&3
	return $?
}

print_msg() {
	_dialog --msgbox "$@" 8 60
}

_exit() {
	local exits
	_dialog --yesno "Exit installation?" 8 50
	if [ $? = 0 ]; then
		clear
		exit 0
	fi
}

menu_keymap() {
	local _keymaps="$(find /usr/share/keymaps/ -type f -iname "*.map.gz" -printf "%f\n" | sed 's|.map.gz||g' | sort)"
	local _KEYMAPS=
	
	for f in ${_keymaps}; do
        _KEYMAPS="${_KEYMAPS} ${f} -"
	done
	keymap_var=$(_dialog --menu "Select your keymap" 0 50 0 ${_KEYMAPS})

}

menu_timezone() {
	local _tzones="$(cd /usr/share/zoneinfo; find Africa/ America/ Antarctica/ Arctic/ Asia/ Atlantic/ Australia/ Europe/ Indian/ Pacific/ posix/ -type f | sort)"
    local _TIMEZONES=

    for f in ${_tzones}; do
        _TIMEZONES="${_TIMEZONES} ${f} -"
    done
	timezone_var=$(_dialog --menu "Select your timezone" 0 40 0 ${_TIMEZONES})

}

menu_hostname() {
	local _preset
	if [ -z $hostname_var ]; then
		_preset=venom
	else
		_preset=$hostname_var
	fi
	hostname_var=$(_dialog --inputbox "Enter hostname:" 0 50 $_preset)
}

menu_rootpasswd() {
	while true; do
		rootpasswd=$(_dialog --insecure --passwordbox "Enter password for root:" 0 50)
		if [ $? != 0 ]; then
			break
		fi
		rootpasswdc=$(_dialog --insecure --passwordbox "Enter password confirmation for root:" 0 50)
		if [ $? != 0 ]; then
			break
		fi
		if [ -z $rootpasswd ]; then
			_dialog --infobox "Password cant empty, try again!" 3 40
			sleep 2
		elif [ $rootpasswd != $rootpasswdc ]; then
			_dialog --infobox "Password does not match, try again!" 3 40
			sleep 2
		else
			break
		fi
	done
}

menu_useraccount() {
	local _preset
	if [ -z $user_var ]; then
		_preset=venom
	else
		_preset=$user_var
	fi
	user_var=$(_dialog --inputbox "Enter login name:" 0 50 $_preset)
	if [ $? = 0 ]; then
		while true; do
			passwd=$(_dialog --insecure --passwordbox "Enter password for $user_var:" 0 50)
			if [ $? != 0 ]; then
				break
			fi
			passwdc=$(_dialog --insecure --passwordbox "Enter password confirmation for $user_var:" 0 50)
			if [ $? != 0 ]; then
				break
			fi
			if [ -z $passwd ]; then
				_dialog --infobox "Password cant empty, try again!" 3 40
				sleep 2
			elif [ $passwd != $passwdc ]; then
				_dialog --infobox "Password does not match, try again!" 3 40
				sleep 2
			else
				break
			fi
		done
	else
		return
	fi
}

showdisk() {
	local disk
	disk=$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep -w disk | awk '{print $1}')
	echo $disk
}

showpartition() {
	local part
	part=$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep -w part | awk '{print $1}')
	echo $part
}

menu_partition() {
	local dsize
	local dd
	local partmenu
	
	_dialog --yesno "Run cfdisk to partition disk?" $YESNOSIZE
	if [ $? = 0 ]; then
		for d in $(showdisk); do
			dsize=$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep $d | grep -w disk | awk '{print $2}')
			dd="$dd $d $dsize"
		done
		cfdisk_part=$(_dialog --menu "Choose disk to modify partition" 0 50 0 ${dd})
		[ $? = 0 ] || return
		cfdisk $cfdisk_part
	fi
	
	# select partition to install venom
	if [ ! $(showpartition &/dev/null) ]; then
		_dialog --msgbox "No partition found\nPlease create partition first" 7 50
		return
	fi
	for p in $(showpartition); do
		psize=$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep -w $p | awk '{print $2}')
		partmenu="$partmenu $p $psize"
	done
	partition_var=$(_dialog --menu "Choose partition to install Venom" 0 50 0 ${partmenu})
	[ $? = 0 ] || return
	
	# select filesystem type
	_dialog --yesno "Do you want to format $partition_var?" $YESNOSIZE
	if [ $? = 0 ]; then
		filesystem_var=$(_dialog --menu "Select filesystem for $partition_var" 0 70 0 \
			ext4 "Next generation of Ext3 file system" \
			ext3 "Journaling version of Ext2 file system" \
			ext2 "Standard file system Ext2" \
			btrfs "New promising file system" \
			reiserfs "Very stable file system but not maintain anymore" \
			xfs "High performance journaling file system create by SGI")
		[ $? = 0 ] || return
	fi
	
	swap_dev=$(fdisk -l -o device,type | grep swap | cut -d " " -f1 | head -n1)
	if [ -n $swap_dev ]; then
		_dialog --yesno "Swap partition found in $swap_dev, do you want to format it?" $YESNOSIZE
		if [ $? = 0 ]; then
			format_swap=1
		else
			if [ "$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep -w $swap_dev | grep -w swap)" ]; then
				swap_ok=1
			fi
		fi
		if [ "$format_swap" = 1 ] || [ "$swap_ok" = 1 ]; then
			_dialog --yesno "Add swap partition ($swap_dev) to fstab?" $YESNOSIZE
			if [ $? = 0 ]; then
				add_swap=1
			fi
		fi
	fi		
}

menu_bootloader() {
	local d
	local dd
	local dsize
	
	_dialog --yesno "Do you want install grub bootloader?" $YESNOSIZE
	if [ $? = 0 ]; then
		for d in $(showdisk); do
			dsize=$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep $d | grep -w disk | awk '{print $2}')
			dd="$dd $d $dsize"
		done
		grub_var=$(_dialog --menu "Choose disk to install grub" 0 50 0 ${dd})
		[ $? = 0 ] || return
	else
		grub_var=SKIP
	fi
}

view_settings() {
	_dialog --title "  Saved settings for installation  " --msgbox "
Keymap    : $keymap_var
Timezone  : $timezone_var
Hostname  : $hostname_var
User      : $user_var
UserPasswd: $([ $passwd ] && echo -done-)
Rootpswd  : $([ $rootpasswd ] && echo -done-)
Partition : $partition_var
Swap      : $swap_dev
Grub      : $grub_var
" 0 0
}

install_now() {
	local notset
	
	[ -z $keymap_var ] && notset="Keyboard"
	[ -z $partition_var ] && notset="$notset Partition"
	[ -z $timezone_var ] && notset="$notset Timezone"
	[ -z $hostname_var ] && notset="$notset Hostname"
	[ -z $user_var ] && notset="$notset UserAccount"
	[ -z $rootpasswd ] && notset="$notset RootPassword"
	[ -z $grub_var ] && notset="$notset Bootloader"
	
	if [ "$notset" ]; then
		notset=$(echo $notset | tr ' ' '\n')
		_dialog --title "  This options is not set  " --msgbox "$notset" 0 0
		return
	fi
	
	_dialog --yesno "Continue with installation?" $YESNOSIZE
	
	# format partition
	if [ $filesystem_var ]; then
		_dialog --infobox "Formatting partition $partition_var to $filesystem_var" 3 50
		case $filesystem_var in
			ext4) mkfs.ext4 -F $partition_var &>/dev/null ;;
			ext3) mkfs.ext3 -F $partition_var &>/dev/null ;;
			ext2) mkfs.ext2 -F $partition_var &>/dev/null ;;
			xfs) mkfs.xfs -f -m crc=0 $partition_var &>/dev/null ;;
			reiserfs) mkreiserfs -q $partition_var &>/dev/null ;;
			btrfs) mkfs.btrfs -f $partition_var &>/dev/null ;;
		esac
	fi
	
	# make swap
	if [ "$format_swap" = 1 ] && [ "$swap_dev" ]; then
		_dialog --infobox "Formatting partition $swap_dev to swap" 3 50
		mkswap $swap_dev &>/dev/null
	fi
	
	rm -fr $VENOMROOT
	mkdir -p $VENOMROOT
	mount $partition_var $VENOMROOT
	
	totalsfs=$(unsquashfs -l $ROOTSFS | wc -l)
	countsfs=0
	
	( unsquashfs -f -i -d $VENOMROOT $ROOTSFS | sed "s:$VENOMROOT::" | while read line; do
		countsfs=$(( $countsfs + 1 ))
		echo " $(( 100*$countsfs/$totalsfs ))% $line"
	done ) | _dialog --progressbox "unsquash filesystem to $partition_var..." 20 70
	
	if [ -x $VENOMROOT/etc/rc.d/networkmanager ]; then
		network=networkmanager
	elif [ -x $VENOMROOT/etc/rc.d/network ]; then
		network=networkmanager
	fi
	
	if [ -x $VENOMROOT/etc/rc.d/lxdm ]; then
		dm=lxdm
	elif [ -x $VENOMROOT/etc/rc.d/lightdm ]; then
		dm=lightdm
	fi

	daemons="sysklogd dbus $dm alsa bluetooth gpm $network"

	for d in $daemons; do
		if [ -f $VENOMROOT/etc/rc.d/$d ]; then
			daemon+=($d)
		fi
	done

	_dialog --infobox "Applying saved settings..." 10 50
	# rc.conf
	echo "#
# system configuration
#

HOSTNAME=\"$hostname_var\"
TIMEZONE=\"$timezone_var\"
CLOCK=\"utc\"
FONT=\"\"
KEYMAP=\"$keymap_var\"
DAEMONS=(${daemon[@]})
" > $VENOMROOT/etc/rc.conf

	# fstab
	echo "# Begin /etc/fstab

# file system  mount-point  type     options             dump  fsck
#                                                              order

$partition_var      /            $filesystem_var     defaults            1     1" > $VENOMROOT/etc/fstab

	if [ $add_swap = 1 ] && [ $swap_dev ]; then
		echo "$swap_dev      swap         swap     pri=1               0     0" >> $VENOMROOT/etc/fstab
	fi

	echo "proc           /proc        proc     nosuid,noexec,nodev 0     0
sysfs          /sys         sysfs    nosuid,noexec,nodev 0     0
devpts         /dev/pts     devpts   gid=5,mode=620      0     0
tmpfs          /run         tmpfs    defaults            0     0
devtmpfs       /dev         devtmpfs mode=0755,nosuid    0     0

# End /etc/fstab" >> $VENOMROOT/etc/fstab
	
	_dialog --infobox "Creating user ($user_var)..." 3 50
	useradd -R $VENOMROOT -m -G users,wheel,audio,video -s /bin/bash $user_var
	echo "$user_var:$passwd" | chpasswd -R $VENOMROOT -c SHA512
	echo "root:$rootpasswd" | chpasswd -R $VENOMROOT -c SHA512
	
	_dialog --infobox "Generating locales (en_US.UTF-8)..." 3 50
	sed 's/#\(en_US\.UTF-8\)/\1/' -i $VENOMROOT/etc/locales
	run_chroot genlocales &>/dev/null
	
	_dialog --infobox "Generating initramfs..." 3 50
	run_chroot mkinitramfs -k $(file $VENOMROOTFS/boot/vmlinuz-venom | cut -d ' ' -f9) -o /boot/initrd-venom.img &>/dev/null

	if [ "$grub_var" != SKIP ]; then
		_dialog --infobox "Installing grub..." 3 50
		run_chroot grub-install $grub_var &>/dev/null
		run_chroot grub-mkconfig -o /boot/grub/grub.cfg &>/dev/null
	fi
	
	_dialog --infobox "Trigger required hook..." 3 50
	trigger /usr/bin/fc-cache -s
	trigger /usr/bin/gdk-pixbuf-query-loaders --update-cache
	trigger /usr/bin/gio-querymodules /usr/lib/gio/modules
	trigger /usr/bin/gio-querymodules-32 /usr/lib32/gio/modules
	trigger /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas
	trigger /usr/bin/gtk-query-immodules-2.0 --update-cache
	trigger /usr/bin/gtk-query-immodules-3.0 --update-cache
	trigger /sbin/udevadm hwdb --update
	trigger /usr/bin/update-desktop-database --quiet
	trigger /usr/bin/update-mime-database /usr/share/mime
	
	umount $VENOMROOT
	_dialog --msgbox "Installation done\nYou can reboot now" 7 30
}

trigger() {
	if [ -x $VENOMROOTFS/$1 ]; then
		run_chroot $@
	fi
}

mount_pseudofs() {
	mount --bind /dev $VENOMROOT/dev
	mount -t devpts devpts $VENOMROOT/dev/pts -o gid=5,mode=620
	mount -t proc proc $VENOMROOT/proc
	mount -t sysfs sysfs $VENOMROOT/sys
	mount -t tmpfs tmpfs $VENOMROOT/run
}

umount_pseudofs() {
	umount $VENOMROOT/dev/pts
	umount $VENOMROOT/dev
	umount $VENOMROOT/run
	umount $VENOMROOT/proc
	umount $VENOMROOT/sys
}

run_chroot() {
	mount_pseudofs
	chroot $VENOMROOT "$@"
	umount_pseudofs
}

menu() {
	MAINMSG="Welcome to Venom Linux Installer \n
Set necessary options before start the installation \n"
	if [ -z $DEFITEM ]; then
		DEFITEM=Keyboard
	fi
	
	mainmenu=$(_dialog --default-item $DEFITEM \
			--cancel-label "Exit" \
			--title "  Venom Linux installer  " \
			--menu "$MAINMSG" 0 70 0 \
			"Keyboard" "Set Keyboard" \
			"Partition" "Partition disk" \
			"Timezone" "Set timezone" \
			"Hostname" "Set hostname" \
			"UserAccount" "Set user account" \
			"RootPassword" "Set root password" \
			"Bootloader" "Set grub partition" \
			"Settings" "View saved settings" \
			"Install" "Install Venom" \
			"Exit" "Exit installation")
			
	if [ $? = 0 ]; then
		case $mainmenu in 
		 	    Keyboard) menu_keymap      && [ -n $keymap_var ]    && DEFITEM=Partition ;;
			   Partition) menu_partition   && [ -n $partition_var ] && DEFITEM=Timezone ;;
			    Timezone) menu_timezone    && [ -n $timezone_var ]  && DEFITEM=Hostname ;;
			    Hostname) menu_hostname    && [ -n $hostname_var ]  && DEFITEM=UserAccount ;;
			 UserAccount) menu_useraccount && [ -n $user_var ]      && DEFITEM=RootPassword ;;
			RootPassword) menu_rootpasswd  && [ -n $rootpasswd ]    && DEFITEM=Bootloader ;;
			  Bootloader) menu_bootloader  && [ -n $grub_var ]      && DEFITEM=Settings ;;
			    Settings) view_settings    && DEFITEM=Install ;;
			     Install) install_now && DEFITEM=Exit ;;
			        Exit) _exit ;;
		esac
	else
		_exit
	fi
}

if [ ! $(type -p unsquashfs) ]; then
	echo "squashfs-tools is not installed, aborted."
	exit 1
fi

if [ ! $(type -p dialog) ]; then
	echo "dialog is not installed, aborted."
	exit 1
fi

if [ ! -f $ROOTSFS ]; then
	echo "squashed filesystem '$ROOTSFS' not found!"
	exit  1
fi

while true; do
	menu
done

exit $?
