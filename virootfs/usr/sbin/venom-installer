#!/bin/bash

DEFSIZE="10 50 0"
YESNOSIZE="8 50"
WIDTH=70
HEIGHT=10

VENOMROOT="/tmp/venominstall"
ROOTSFS="/lib/initramfs/medium/filesystem/root.sfs"

EFI_SYSTEM=0

if [ -e /sys/firmware/efi/systab ]; then
	EFI_SYSTEM=1
fi

_dialog() {
	dialog --no-mouse "$@" 3>&1 1>&2 2>&3
	return $?
}

print_msg() {
	_dialog --clear --msgbox "$@" 8 60
}

_exit() {
	local exits
	_dialog --yesno "Exit installation?" 8 50
	if [ $? = 0 ]; then
		clear
		exit 0
	fi
}

menu_keymap() {
	local _keymaps="$(find /usr/share/keymaps/ -type f -iname "*.map.gz" -printf "%f\n" | sed 's|.map.gz||g' | sort)"
	local _KEYMAPS=
	
	for f in ${_keymaps}; do
        _KEYMAPS="${_KEYMAPS} ${f} -"
	done
	keymap_var=$(_dialog --menu "Select your keymap" 0 50 0 ${_KEYMAPS})
}

menu_timezone() {
	local _tzones="$(cd /usr/share/zoneinfo; find Africa/ America/ Antarctica/ Arctic/ Asia/ Atlantic/ Australia/ Europe/ Indian/ Pacific/ posix/ -maxdepth 1 -type f | sort)"
	local _TIMEZONES=

	for f in ${_tzones}; do
		_TIMEZONES="${_TIMEZONES} ${f} -"
	done
	timezone_var=$(_dialog --menu "Select your timezone" 0 50 0 ${_TIMEZONES})
}

menu_hostname() {
	local _preset
	if [ -z $hostname_var ]; then
		_preset=venom
	else
		_preset=$hostname_var
	fi
	hostname_var=$(_dialog --inputbox "Enter hostname:" 0 50 $_preset)
}

menu_rootpasswd() {
	while true; do
		rootpasswd=$(_dialog --insecure --passwordbox "Enter password for root:" 0 50)
		if [ $? != 0 ]; then
			break
		fi
		rootpasswdc=$(_dialog --insecure --passwordbox "Enter password confirmation for root:" 0 50)
		if [ $? != 0 ]; then
			break
		fi
		if [ -z $rootpasswd ]; then
			_dialog --infobox "Password cant empty, try again!" 3 40
			sleep 2
		elif [ $rootpasswd != $rootpasswdc ]; then
			_dialog --infobox "Password does not match, try again!" 3 40
			sleep 2
		else
			break
		fi
	done
}

menu_useraccount() {
	local _preset
	if [ -z $user_var ]; then
		_preset=venom
	else
		_preset=$user_var
	fi
	user_var=$(_dialog --inputbox "Enter login name:" 0 50 $_preset)
	if [ $? = 0 ]; then
		while true; do
			passwd=$(_dialog --insecure --passwordbox "Enter password for $user_var:" 0 50)
			if [ $? != 0 ]; then
				break
			fi
			passwdc=$(_dialog --insecure --passwordbox "Enter password confirmation for $user_var:" 0 50)
			if [ $? != 0 ]; then
				break
			fi
			if [ -z $passwd ]; then
				_dialog --infobox "Password cant empty, try again!" 3 40
				sleep 2
			elif [ $passwd != $passwdc ]; then
				_dialog --infobox "Password does not match, try again!" 3 40
				sleep 2
			else
				break
			fi
		done
	else
		return
	fi
}

showdisk() {
	local disk
	disk=$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep -w disk | awk '{print $1}')
	echo $disk
}

showswap() {
	local swap
	swap=$(fdisk -l | grep ^\/dev | grep swap | awk '{print $1}')
	echo $swap
}

showefi() {
	local efi
	efi=$(fdisk -l | grep ^\/dev | grep EFI | awk '{print $1}')
	echo $efi
}

showpartition() {
	local part
	part=$(fdisk -l | grep ^\/dev | grep -Ev '(swap|Extended|EFI|BIOS)' | awk '{print $1}')
	echo $part
}

menu_partition() {
	local dsize
	local dd
	local partmenu
	local s
	local swapmenu

	_dialog --clear --title "  Partitioning Tips  " --msgbox "\n
For BIOS systems, MBR or GPT partition tables are supported.
To use GPT partition in BIOS system 1MB partition must be created and set as 'BIOS boot'.\n\n
For EFI systems, GPT partition is required and a FAT32 partition with at least 100MB set as 'EFI System'
must be created. This partition will be used as 'EFI System Partition' with '/boot/efi' as mountpoint." 14 70
	
	_dialog --yesno "Run cfdisk to partition disk?" $YESNOSIZE
	if [ $? = 0 ]; then
		for d in $(showdisk); do
			dsize=$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep $d | grep -w disk | awk '{print $2}')
			dd="$dd $d $dsize"
		done
		cfdisk_part=$(_dialog --menu "Choose disk to modify partition" 0 50 0 ${dd})
		[ $? = 0 ] || return
		cfdisk $cfdisk_part
	fi
	
	# select partition to install venom
	if [[ ! $(showpartition) ]]; then
		_dialog --msgbox "No partition found\nPlease create partition first" 7 50
		return
	fi
	for p in $(showpartition); do
		psize=$(fdisk -l | grep -w ^$p | awk '{print $5}')
		fstype=$(lsblk -nrp -o NAME,TYPE,FSTYPE | grep $p | awk '{print $3}')
		[ $fstype ] || fstype=none
		partmenu="$partmenu $p size:$psize,fstype:$fstype"
	done
	partition_var=$(_dialog --menu "Choose partition to install Venom" 0 60 0 ${partmenu})
	[ $? = 0 ] || return

	if [ "$(lsblk -nrp -o NAME,TYPE,FSTYPE | grep -w $partition_var | awk '{print $3}')" != "" ]; then
		_dialog --yesno "Do you want to format $partition_var?" $YESNOSIZE
		if [ $? = 0 ]; then
			partformat=1
		else
			partformat=
		fi
	else
		partformat=1
	fi

	if [ $partformat = 1 ]; then
		# select filesystem type
		filesystem_var=$(_dialog --menu "Select filesystem for $partition_var" 0 60 0 \
			ext4 "Ext4 Journaling Filesystem" \
			ext3 "Ext3 Journaling Filesystem" \
			ext2 "Standard Linux ext2 Filesystem" \
			btrfs "Btrfs Copy-on-Write B-tree Filesystem" \
			reiserfs "ReiserFS Journaling Filesystem" \
			xfs "SGI's Journaling Filesystem")
		[ $? = 0 ] || return
	else
		filesystem_var=
	fi

	if [ $EFI_SYSTEM = 1 ]; then
		if [[ $(showefi) ]]; then
			for e in $(showefi); do
				ssize=$(fdisk -l | grep -w ^$e | awk '{print $5}')
				efimenu="$efimenu $e $ssize"
			done
			efi_var=$(_dialog --menu "Choose EFI partition" 0 50 0 ${efimenu})
		fi
	fi

	if [[ $(showswap) ]]; then
		_dialog --yesno "Swap partition found, do you want to use it?" $YESNOSIZE
		if [ $? = 0 ]; then
			for s in $(showswap); do
				ssize=$(fdisk -l | grep -w ^$s | awk '{print $5}')
				swapmenu="$swapmenu $s $ssize"
			done
			swap_var=$(_dialog --menu "Choose swap partition" 0 50 0 ${swapmenu})
			# check if swap partition is ok, ask if user want to re-format it, else dont ask, just format it
			if [ "$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep -w $swap_var | grep -w swap)" ]; then
				_dialog --yesno "Format swap partition ($swap_var)?" $YESNOSIZE
				if [ $? = 0 ]; then
					format_swap=1
				else
					format_swap=
				fi
			else
				format_swap=1
			fi
		else
			swap_var=SKIP
			format_swap=
		fi
	else
		swap_var=SKIP
	fi
}

menu_bootloader() {
	local d
	local dd
	local dsize
	
	_dialog --yesno "Do you want install grub bootloader?" $YESNOSIZE
	if [ $? = 0 ]; then
		for d in $(showdisk); do
			dsize=$(lsblk -nrp -o NAME,SIZE,TYPE,FSTYPE | grep $d | grep -w disk | awk '{print $2}')
			dd="$dd $d $dsize"
		done
		grub_var=$(_dialog --menu "Choose disk to install grub" 0 50 0 ${dd})
		[ $? = 0 ] || return
	else
		grub_var=SKIP
	fi
}

view_settings() {
	_dialog --title "  Saved settings for installation  " --msgbox "
Keymap    : $keymap_var
Timezone  : $timezone_var
Hostname  : $hostname_var
User      : $user_var
UserPswd  : $([ $passwd ] && echo -done-)
Rootpswd  : $([ $rootpasswd ] && echo -done-)
Root      : $partition_var $filesystem_var
EFI       : $([ $EFI_SYSTEM != 1 ] && echo SKIP || echo $efi_var)
Swap      : $swap_var $([ $format_swap = 1 ] && echo re-format)
Grub      : $grub_var
" 0 0
}

install_now() {
	local notset
	
	[ -z $keymap_var ] && notset="Keyboard"
	[ -z $partition_var ] && notset="$notset Partition"
	[ -z $timezone_var ] && notset="$notset Timezone"
	[ -z $hostname_var ] && notset="$notset Hostname"
	[ -z $user_var ] && notset="$notset UserAccount"
	[ -z $rootpasswd ] && notset="$notset RootPassword"
	[ -z $grub_var ] && notset="$notset Bootloader"
	
	if [ "$notset" ]; then
		notset=$(echo $notset | tr ' ' '\n')
		_dialog --title "  This options is not set  " --msgbox "$notset" 0 0
		return
	fi
	
	mountpoint -q $VENOMROOT/boot/efi && umount $VENOMROOT/boot/efi
	mountpoint -q $VENOMROOT && umount $VENOMROOT
	
	_dialog --yesno "Continue with installation?" $YESNOSIZE
	
	# format partition
	if [ $filesystem_var ]; then
		_dialog --infobox "Formatting partition $partition_var to $filesystem_var" 3 50
		case $filesystem_var in
			ext4) mkfs.ext4 -F $partition_var &>/dev/null ;;
			ext3) mkfs.ext3 -F $partition_var &>/dev/null ;;
			ext2) mkfs.ext2 -F $partition_var &>/dev/null ;;
			xfs) mkfs.xfs -f -m crc=0 $partition_var &>/dev/null ;;
			reiserfs) mkreiserfs -q $partition_var &>/dev/null ;;
			btrfs) mkfs.btrfs -f $partition_var &>/dev/null ;;
		esac
		if [ $? != 0 ]; then
			print_error_msg "Failed create '$filesystem_var' filesystem on '$partition_var'"
		fi
	fi

	# make EFI partition
	if [ "$EFI_SYSTEM" = 1 ]; then
		_dialog --infobox "Formatting partition $efi_var to fat32" 3 50
		mkfs.vfat -F32 $efi_var &>/dev/null || print_error_msg "Failed create fat32 filesystem on $efi_var"
	fi
	
	# make swap
	if [ "$format_swap" = 1 ] && [ "$swap_var" ]; then
		_dialog --infobox "Formatting partition $swap_var to swap" 3 50
		mkswap $swap_var &>/dev/null
		if [ $? != 0 ]; then
			print_error_msg "Failed create 'swap' on '$swap_var'"
		fi
	fi
	
	rm -fr $VENOMROOT
	mkdir -p $VENOMROOT

	mount $partition_var $VENOMROOT || print_error_msg "Error mount '$partition_var'"

	if [ "$EFI_SYSTEM" = 1 ]; then
		mkdir -p $VENOMROOT/boot/efi || print_error_msg "Error create '$VENOMROOT/boot/efi' directory"
		mount $efi_var $VENOMROOT/boot/efi || print_error_msg "Error mount '$efi_var'"
	fi
		
	
	totalsfs=$(unsquashfs -l $ROOTSFS | wc -l)
	countsfs=0
	
	( unsquashfs -f -i -d $VENOMROOT $ROOTSFS | sed "s:$VENOMROOT::" | while read line; do
		countsfs=$(( $countsfs + 1 ))
		echo " $(( 100*$countsfs/$totalsfs ))% $line"
	done ) | _dialog --progressbox "unsquash filesystem to $partition_var..." 20 70
	
	if [ -x $VENOMROOT/etc/rc.d/networkmanager ]; then
		network=networkmanager
	elif [ -x $VENOMROOT/etc/rc.d/network ]; then
		network=network
	fi
	
	if [ -x $VENOMROOT/etc/rc.d/lxdm ]; then
		dm=lxdm
	elif [ -x $VENOMROOT/etc/rc.d/lightdm ]; then
		dm=lightdm
	fi

	daemons="sysklogd dbus $dm alsa bluetooth gpm $network"

	for d in $daemons; do
		if [ -f $VENOMROOT/etc/rc.d/$d ]; then
			daemon+=($d)
		fi
	done

	_dialog --infobox "Applying saved settings..." 10 50
	# rc.conf
	echo "#
# system configuration
#

HOSTNAME=\"$hostname_var\"
TIMEZONE=\"$timezone_var\"
CLOCK=\"utc\"
FONT=\"\"
KEYMAP=\"$keymap_var\"
DAEMONS=(${daemon[@]})
" > $VENOMROOT/etc/rc.conf

	# fstab
	echo "# <device> <dir> <type> <options> <dump> <fsck>" > $VENOMROOT/etc/fstab
	echo "$partition_var / $filesystem_var defaults 1 1" >> $VENOMROOT/etc/fstab

	if [ "$EFI_SYSTEM" = 1 ]; then
		echo "$efi_var /boot/efi vfat defaults 0 2" >> $VENOMROOT/etc/fstab
	fi

	if [ $swap_var != SKIP ]; then
		echo "$swap_var swap swap pri=1 0 0" >> $VENOMROOT/etc/fstab
	fi
	
	_dialog --infobox "Creating user ($user_var)..." 3 50
	useradd -R $VENOMROOT -m -G users,wheel,audio,video -s /bin/bash $user_var || print_error_msg "Error configure user '$user_var'"
	echo "$user_var:$passwd" | chpasswd -R $VENOMROOT -c SHA512 || print_error_msg "Error setting user password"
	echo "root:$rootpasswd" | chpasswd -R $VENOMROOT -c SHA512 || print_error_msg "Error setting root password"
	
	_dialog --infobox "Generating locales (en_US.UTF-8)..." 3 50
	sed 's/#\(en_US\.UTF-8\)/\1/' -i $VENOMROOT/etc/locales
	run_chroot genlocales &>/dev/null
	
	_dialog --infobox "Generating initramfs..." 3 50
	run_chroot mkinitramfs -k $(file $VENOMROOTFS/boot/vmlinuz-venom | cut -d ' ' -f9) -o /boot/initrd-venom.img &>/dev/null || print_error_msg "Error generating initramfs"

	if [ "$grub_var" != SKIP ]; then
		if [ $EFI_SYSTEM = 1 ]; then
			_dialog --infobox "Installing grub (EFI)..." 3 50
			run_chroot grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=venom_grub --recheck $grub_var &>/dev/null || print_error_msg "Error installing grub"
			if [ "$(cat /proc/cpuinfo | grep hypervisor)" ]; then
				mkdir -p $VENOMROOT/boot/efi/EFI/BOOT
				cp $VENOMROOT/boot/efi/EFI/venom_grub/grubx64.efi $VENOMROOT/boot/efi/EFI/BOOT/BOOTX64.EFI
			fi
		else
			_dialog --infobox "Installing grub..." 3 50
			run_chroot grub-install $grub_var &>/dev/null || print_error_msg "Error installing grub"
		fi
		_dialog --infobox "Generating grub config..." 3 50
		run_chroot grub-mkconfig -o /boot/grub/grub.cfg &>/dev/null || print_error_msg "Error generating grub config"
	fi
	
	_dialog --infobox "Removing temporary packages..." 3 50
	run_chroot pkgdel dialog &>/dev/null
	run_chroot pkgdel squashfs-tools &>/dev/null
	
	mountpoint -q $VENOMROOT/boot/efi && umount $VENOMROOT/boot/efi
	mountpoint -q $VENOMROOT && umount $VENOMROOT
	_dialog --msgbox "Installation done\nYou can reboot now" 7 30
	exit 0
}

print_error_msg() {
	print_msg "$@"
	mountpoint -q $VENOMROOT/boot/efi && umount $VENOMROOT/boot/efi
	mountpoint -q $VENOMROOT && umount $VENOMROOT
	exit 1
}

mount_pseudofs() {
	mount --bind /dev $VENOMROOT/dev
	mount -t devpts devpts $VENOMROOT/dev/pts -o gid=5,mode=620
	mount -t proc proc $VENOMROOT/proc
	mount -t sysfs sysfs $VENOMROOT/sys
	if [ "$EFI_SYSTEM" = 1 ]; then
		mount --bind /sys/firmware/efi/efivars $VENOMROOT/sys/firmware/efi/efivars
	fi
	mount -t tmpfs tmpfs $VENOMROOT/run
	# workaround on stupid 'WARNING: Device /dev/XXXX not initialized in udev database even after waiting 10000000 microseconds.'
	mkdir -p $VENOMROOT/run/udev
	mount --bind /run/udev $VENOMROOT/run/udev
}

umount_pseudofs() {
	umount $VENOMROOT/dev/pts
	umount $VENOMROOT/dev
	umount $VENOMROOT/run/udev
	umount $VENOMROOT/run
	umount $VENOMROOT/proc
	if [ "$EFI_SYSTEM" = 1 ]; then
		umount $VENOMROOT/sys/firmware/efi/efivars
	fi
	umount $VENOMROOT/sys
}

run_chroot() {
	mount_pseudofs
	chroot $VENOMROOT "$@"
	retval=$?
	umount_pseudofs
	return $retval
}

menu() {
	MAINMSG="Welcome to Venom Linux Installer \n
Set necessary options before start the installation \n"
	if [ -z $DEFITEM ]; then
		DEFITEM=Keyboard
	fi
	
	mainmenu=$(_dialog --default-item $DEFITEM \
			--cancel-label "Exit" \
			--title "  Venom Linux installer $([ "$EFI_SYSTEM" = 1 ] && echo '- UEFI') " \
			--menu "$MAINMSG" 0 70 0 \
			"Keyboard" "Set Keyboard" \
			"Partition" "Partition disk" \
			"Timezone" "Set timezone" \
			"Hostname" "Set hostname" \
			"UserAccount" "Set user account" \
			"RootPassword" "Set root password" \
			"Bootloader" "Set grub partition" \
			"Settings" "View saved settings" \
			"Install" "Install Venom" \
			"Exit" "Exit installation")
			
	if [ $? = 0 ]; then
		case $mainmenu in 
		 	    Keyboard) menu_keymap      && [ -n $keymap_var ]    && DEFITEM=Partition ;;
			   Partition) menu_partition   && [ -n $partition_var ] && DEFITEM=Timezone ;;
			    Timezone) menu_timezone    && [ -n $timezone_var ]  && DEFITEM=Hostname ;;
			    Hostname) menu_hostname    && [ -n $hostname_var ]  && DEFITEM=UserAccount ;;
			 UserAccount) menu_useraccount && [ -n $user_var ]      && DEFITEM=RootPassword ;;
			RootPassword) menu_rootpasswd  && [ -n $rootpasswd ]    && DEFITEM=Bootloader ;;
			  Bootloader) menu_bootloader  && [ -n $grub_var ]      && DEFITEM=Settings ;;
			    Settings) view_settings    && DEFITEM=Install ;;
			     Install) install_now && DEFITEM=Exit ;;
			        Exit) _exit ;;
		esac
	else
		_exit
	fi
}

debug=0

if [ "$1" = "--debug" ]; then
	debug=1
fi

if [ ! $(type -p unsquashfs) ]; then
	echo "squashfs-tools is not installed, aborted."
	exit 1
fi

if [ ! $(type -p dialog) ]; then
	echo "dialog is not installed, aborted."
	exit 1
fi

if [ ! -f $ROOTSFS ] && [ $debug != 1 ]; then
	echo "squashed filesystem '$ROOTSFS' not found!"
	exit  1
fi

while true; do
	menu
done

exit $?
