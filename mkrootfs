#!/bin/bash

interrupted() {
	die "Abort by user."
}

cleanup() {
	[ "$cleanvenomsrc" = 1 ] && rm -fr $VENOMSRC
}

die() {
	[ "$@" ] && printerror $@
	umount_pseudofs
	umountbind_cache
	cleanup
	exit 1
}

printstep() {
	echo -e "\e[0;36m::\e[0m $*"
}

printerror() {
	echo -e "\e[0;31mERROR:\e[0m $*"
}

chroot_run() {
	mount_pseudofs
	cp -L /etc/resolv.conf $VENOMSRC/etc/
	chroot $VENOMSRC $@
	retval=$?
	umount_pseudofs
	return $retval
}

mount_pseudofs() {
	mount --bind /dev $VENOMSRC/dev
	mount -t devpts devpts $VENOMSRC/dev/pts -o gid=5,mode=620
	mount -t proc proc $VENOMSRC/proc
	mount -t sysfs sysfs $VENOMSRC/sys
	mount -t tmpfs tmpfs $VENOMSRC/run
}

umount_pseudofs() {
	umount $VENOMSRC/dev/pts &>/dev/null
	umount $VENOMSRC/dev &>/dev/null
	umount $VENOMSRC/run &>/dev/null
	umount $VENOMSRC/proc &>/dev/null
	umount $VENOMSRC/sys &>/dev/null
}

mountbind_cache() {
	# mount bind cachedir
	mkdir -p $SRC_CACHE $PKG_CACHE
	mount --bind $SRC_CACHE $VENOMSRC/var/cache/scratchpkg/sources
	mount --bind $PKG_CACHE $VENOMSRC/var/cache/scratchpkg/packages
}

umountbind_cache() {
	# umount binded cachedir
	umount $VENOMSRC/var/cache/scratchpkg/sources &>/dev/null
	umount $VENOMSRC/var/cache/scratchpkg/packages &>/dev/null
}

fetch() {
	local filename
	filename=$(basename $ROOTFSURL)
	rm -f $filename
	if [ -f $filename.part ]; then
		wget -c --output-document=$filename.part $ROOTFSURL
	else
		wget --output-document=$filename.part $ROOTFSURL
	fi
	if [ $? != 0 ]; then
		return 1
	else
		mv $filename.part $filename
	fi
}

usage() {
	cat << EOF
Usage:
  $(basename $0) [options] <venom source>
  
Options:
  -p <path>           set packages cache directory
  -s <path>           set sources cache directory
  -o <name.txz>       output name for rootfs
  -h                  show this help msg
  
Note:
  'venom source' should be a rootfs directory or rootfs tarball image
  if not define, it will download prebuilt one
  
EOF
}

checkinput() {
	if [ -z $1 ] || [[ $1 = -* ]]; then
		echo "this option need argument"
		exit 2
	fi
}

parseopt() {
	while [ "$1" ]; do
		case $1 in
			-p) checkinput $2
				PKG_CACHE=$2
				shift 2;;
			-s) checkinput $2
				SRC_CACHE=$2
				shift 2;;
			-o) checkinput $2
				OUTPUT=$2
				shift 2;;
			-P) checkinput $2
				while [ "$2" ]; do
					case $2 in
						-*) break ;;
						*) [ -z "$ADD_PKGS" ] && ADD_PKGS="$2" || ADD_PKGS="$ADD_PKGS $2"
					esac
					shift
				done
				shift ;;
			-h) usage; exit 0;;
			*)  VENOM=$1
				shift;;
		esac
	done
}

CWD=$PWD
VENOMSRC=/tmp/venomrootfs
ROOTFSURL="https://sourceforge.net/projects/venomlinux/files/venom-rootfs.txz"

selecteddir="bin dev home lib64 mnt proc run srv tmp var boot etc lib opt root sbin sys usr"

parseopt $@

PKG_CACHE=${PKG_CACHE:-$CWD/cache_packages}
SRC_CACHE=${SRC_CACHE:-$CWD/cache_sources}

if [ "$OUTPUT" ]; then
	OUTPUT=$OUTPUT
elif [ ! -f "venom-rootfs.txz" ]; then
	OUTPUT=venom-rootfs.txz
else
	OUTPUT=venom-$(date +"%Y%m%d").txz
fi

if [ "${OUTPUT##*.}" != "txz" ]; then
	printerror "output name should be .txz extension"
	exit 1
fi

trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

if [ $UID != 0 ]; then
	printerror "$(basename $0) need run as root."
	exit 3
fi

if [ -z $VENOM ]; then
	if [ ! -f $(basename $ROOTFSURL) ]; then
		printstep "Fetching $(basename $ROOTFSURL)..."
		fetch $ROOTFSURL || die "failed downloading $(basename $ROOTFSURL)"
	fi
	VENOM=$(basename $ROOTFSURL)
fi

case $VENOM in
	*.txz)	rm -fr $VENOMSRC
			mkdir -p $VENOMSRC
			cleanvenomsrc=1
			printstep "Extracting $VENOM..."
			tar xf $VENOM -C $VENOMSRC || die "failed extracting $VENOM";;
	*)		VENOMSRC=$VENOM;;
esac

# install pkgs
mountbind_cache
printstep "Updating ports..."
chroot_run scratch sync || die "failed updating ports"
printstep "Upgrading scratchpkg..."
chroot_run scratch upgrade -y --no-backup scratchpkg || die "failed upgrade scratchpkg"
printstep "Strip down system to base..."
chroot_run pkgbase || die "failed remove packages..."
printstep "Upgrading system..."
chroot_run scratch sysup -y --no-backup || die "failed system upgrade"
printstep "Running perlfix script..."
chroot_run pkgfix -r -y || die "failed fixing perl modules"
printstep "Fix broken packages..."
chroot_run revdep -r -y || die "failed fix broken packages..."
umountbind_cache

# remove initrd
rm -f $VENOMSRC/boot/initrd-*

for d in $selecteddir; do
	[ -d $VENOMSRC/$d ] && incdir+=" $d"
done

# make rootfs
printstep "Creating rootfs ($OUTPUT)"
rm -f $OUTPUT
pushd $VENOMSRC >/dev/null

tar --exclude="var/cache/scratchpkg/packages/*" \
	--exclude="var/cache/scratchpkg/sources/*" \
	--exclude="var/cache/scratchpkg/log/*" \
	--exclude="var/cache/scratchpkg/work/*" \
	--exclude="*.spkgnew" \
	--exclude="tmp/*" \
	-cvJpf $CWD/$OUTPUT $incdir || die "Failed create rootfs image."

popd >/dev/null
		
printstep "Generate md5sum..."
md5sum $OUTPUT > $OUTPUT.md5
	
printstep "Cleaning up..."	
cleanup

exit 0
